6 ~ 13 라인의 charIndex, charBlkSize는 필요 없는 변수입니다

허세곤―2020.10.14 04:55
코드 정리 및 주석을 달았으나 첫 성공 코드만 표기된다고 하므로 아래에 변경 내역을 적습니다

허세곤―2020.10.14 04:56
[13,14] // 블록: 같은 알파벳이 연속으로 존재하는 구간

허세곤―2020.10.14 04:56
[13,14] // 각 알파벳의 블록 크기 통계를 저장하는 Map

허세곤―2020.10.14 04:57
[18] // 모든 알파벳 블록의 시작 위치를 저장하는 배열

허세곤―2020.10.14 04:57
[28,29] // 단일 문자만 존재하는지 확인하기 위한 변수

허세곤―2020.10.14 04:58
[29,30] // 블록 크기 계산을 위한 변수

허세곤―2020.10.14 04:58
[30,31] // 이전 블록의 알파벳을 저장

허세곤―2020.10.14 04:58
[32 - 수정] // 가장 첫 문자의 블록 시작 위치(0)을 저장

허세곤―2020.10.14 04:59
[39,40] // 다른 문자의 위치를 배열에 추가

허세곤―2020.10.14 04:59
[42,43] // 이전 문자의 블럭 크기 값을 통계에 추가

허세곤―2020.10.14 05:00
[47,48] // 다음 블록 크기 계산을 위한 초기화

허세곤―2020.10.14 05:00
[48,49] // 다음 블록을 찾기 위해 이전 문자 값을 현재 문자 값으로 갱신

허세곤―2020.10.14 05:01
[49,50] // 다른 문자를 한번이라도 발견한 경우

허세곤―2020.10.14 05:01
[49,50] // 단일 문자만 존재하는지 확인하기 위한 변수를 거짓으로 변경

허세곤―2020.10.14 05:01
[51,52] // 현재 블럭의 크기를 1 증가

허세곤―2020.10.14 05:01
[54,55] // 마지막 블럭을 통계에 반영

허세곤―2020.10.14 05:02
[72,73] // 위에서 정리한 위치 값 및 통계를 이용하여 실제 값 계산

허세곤―2020.10.14 05:02
[72,73] /*
[72,73] * 현재 위치에서 우측으로 1개의 문자를 더 읽어가면서
[72,73] * 전체 문자열을 기준으로 한 크기만 계산해가며 진행
[72,73] * ex) 입력: abcd, 현재 위치: 0 -> a(0), ab(1), abc(2), abcd(3)
[72,73] * ex) 입력: aabba, 현재 위치: 1 -> a(0), ab(1), abb(2), abba(2)
[72,73] *
[72,73] * 이 중 첫 문자와 다른 문자만으로 뒷 부분이 채워져 있다고
[72,73] * 가정한 경우의 값을 먼저 계산하면 단순히
[72,73] * 1 + 2 + 3 + 4 + 5 + ... + n = n * (n + 1) / 2
[72,73] * n = 현재 위치를 제외한 나머지 우측 문자의 개수
[72,73] * 와 같이 계산된다
[72,73] *
[72,73] * 해당 값에서 중간에 현재 위치와 같은 문자로 이루어진
[72,73] * 블록의 크기에 따라 감소되는 값을 계산하여 빼기 위해 아래 과정을 거친다
[72,73] *
[72,73] * 1. 현재 위치에 해당하는 블록에 따른 감소 값
[72,73] * ex) 입력: aaab, 현재 위치: 0
[72,73] * 가장 첫 블럭 aaa의 경우 두 번째 및 세 번째까지 a가 이어져
[72,73] * 처음에 가정한 모든 경우의 수에서 1 + 2에 해당하는 값이 0이 되어 버린다
[72,73] * 이를 일반화하면 1 ~ (첫 블럭의 크기 - 1) 까지의 수를 모두 더한 값을 빼주면 된다
[72,73] *
[72,73] * 2. 우측에 존재하는 블록에 따른 감소 값
[72,73] * ex) 입력: aababaabaaa, 현재 위치: 0
[72,73] * 1) 가장 처음 만나는 같은 문자를 가진 블럭 a의 경우
[72,73] * 처음의 가정에 따라 3을 얻어야 하지만 첫 문자와 같으므로
[72,73] * 앞의 b와 첫 문자를 기준으로 2를 얻는다(-1)
[72,73] *
[72,73] * 2) 두 번째 만나는 같은 문자를 가진 블럭 aa의 경우
[72,73] * 처음의 가정에 따라 5 + 6을 얻어야 하지만 두 문자 모두 첫 문자와 같으므로
[72,73] * 해당 블럭 앞의 b와 첫 문자를 기준으로 4 + 4를 얻는다(-1 + -2)
[72,73] *
[72,73] * 3) 세 번째 만나는 같은 문자를 가진 블럭 aaa의 경우
[72,73] * 처음의 가정에 따라 8 + 9 + 10을 얻어야 하지만 세 문자 모두 첫 문자와 같으므로
[72,73] * 이전까지와 같은 방식으로 하면
[72,73] * 해당 블럭 앞의 b와 첫 문자를 기준으로 7 + 7 + 7를 얻어야 하는데
[72,73] * 세 번째 문자의 경우 첫 블럭 우측의 b를 기준으로 8을 얻는다
[72,73] * 따라서 7 + 7 + 8 (-1 + -2 + -2)가 되며
[72,73] * 감소해야 할 값을 보았을 때 -2는 첫 블럭의 크기와 동일한 것을 알 수 있다
[72,73] *
[72,73] * 위 3가지 경우를 정리하면
[72,73] * 1) 첫 블럭의 크기보다 같은 문자를 가진 우측 블럭의 크기가 작거나 같으면
[72,73] * 우측 블럭의 크기(n)를 기준으로 1 ~ n 값을 모두 더한 값만 빼주면 되고
[72,73] * 2) 첫 블럭의 크기보다 같은 문자를 가진 우측 블럭의 크기가 크면
[72,73] * 첫 블럭의 크기(a)를 기준으로 1 ~ a 값을 모두 더한 값을 빼준 뒤
[72,73] * 우측 블럭의 크기에서 첫 블럭의 크기를 뺀 값(n - a)에
[72,73] * 첫 블럭의 크기 값(a)를 곱한 값을 빼주면 된다
[72,73] *
[72,73] * 마지막으로 몇가지 예시를 만들어 가며 계산해보면
[72,73] * 첫 블럭과 같은 문자를 가진 블럭은 우측에
[72,73] * 어느 위치에 있더라도 같은 값을 빼주면 되는 것을 알 수 있다
[72,73] *
[72,73] * 따라서 통계를 활용하여 같은 문자를 가진 블럭의 모든 크기 목록을 기준으로
[72,73] * 해당 블록 크기와 현재 첫 블록의 크기를 기준으로 빼야할 값을 계산한 뒤
[72,73] * 통계 내 해당 블록 크기의 개수를 곱한 값을 빼주도록 하였다
[72,73] *
[72,73] * 또한 아래에서는 같은 문자가 존재하는 블럭 내 첫 문자 위치부터
[72,73] * 해당 블록의 끝 부분까지를 한 묶음으로 해서 계산하도록 식을 구성했다
[72,73] */
[72,73]
[72,73] // 문자가 바뀌는 위치를 기준으로 탐색

허세곤―2020.10.14 05:12
[73,74] // 현재 블록의 시작 위치 및 종료 위치를 저장

허세곤―2020.10.14 05:12
[75,76] // 현재 블록의 크기를 저장

허세곤―2020.10.14 05:12
[76,77] // 현재 블록의 문자를 저장

허세곤―2020.10.14 05:13
[78,79] // 현재 블럭에 대한 통계 값을 지워준다

허세곤―2020.10.14 05:13
[78,79] // 미리 지워둬야 우측에 존재하는 현재 블럭의 문자와

허세곤―2020.10.14 05:13
[78,79] // 같은 문자를 가진 블럭만 남게 된다

허세곤―2020.10.14 05:13
[87,88] // 현재 블록의 크기 만큼 반복

허세곤―2020.10.14 05:13
[88,89] // 각 루프마다 현재 블록의 개수를 1씩 줄어들게되며

허세곤―2020.10.14 05:14
[88,89] // 현재 블록 내 현재 위치를 우측으로 1씩 옮기는 역할을 한다

허세곤―2020.10.14 05:14
[89,90] // 현재 위치를 기준으로 가능한 모든 경우의 수를 더한다

허세곤―2020.10.14 05:14
[90,91] // 현재 위치를 기준으로 우측의 같은 문자 수에 따른 감소 값을 뺀다

허세곤―2020.10.14 05:14
[92,93] // 현재 블록의 문자와 같은 문자를 가진 블록의 통계에서

허세곤―2020.10.14 05:15
[92,93] // 블록 크기 값(키)를 기준으로 작업한다

허세곤―2020.10.14 05:15
[93] sumBlkSize[chCurrentBlk - 'a'].keySet() 코드를 [94]의 for문 안 sumOfBlkSize 위치로 옮기기

허세곤―2020.10.14 05:16
[94,95] // 1) 첫 블럭의 크기보다 같은 문자를 가진 우측 블럭의 크기가 작거나 같으면

허세곤―2020.10.14 05:16
[95,96] // 우측 블럭의 크기(blkSize)를 기준으로 1 ~ n 값을 모두 더한 값에

허세곤―2020.10.14 05:16
[95,96] // 해당 블록의 통계 수 만큼 곱한 값을 빼준다

허세곤―2020.10.14 05:17
[96,97] // 2) 첫 블럭의 크기보다 같은 문자를 가진 우측 블럭의 크기가 크면

허세곤―2020.10.14 05:17
[97,98] // 첫 블럭의 크기(a)를 기준으로 1 ~ a 값을 모두 더한 값을 빼준 뒤

허세곤―2020.10.14 05:17
[97,98] // 우측 블럭의 크기에서 첫 블럭의 크기를 뺀 값(n - a)에

허세곤―2020.10.14 05:17
[97,98] // 첫 블럭의 크기 값(a)를 곱한 값을 구한 뒤

허세곤―2020.10.14 05:17
[97,98] // 해당 블록의 통계 수 만큼 곱한 값을 빼준다

허세곤―2020.10.14 05:17